{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","utils/movieDatatoMovie.ts","components/FindMovie/FindMovie.tsx","api.ts","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","movieDataToMovie","Title","Plot","Poster","imdbID","FindMovie","setMovies","checkAlreadyExists","useState","query","setQuery","setMovie","loading","setLoading","isQueryAbsent","setIsQueryAbsent","handleMovieRequest","e","preventDefault","fetch","then","res","json","catch","Response","Error","getMovie","trim","result","undefined","startsWith","finally","htmlFor","type","id","placeholder","value","onChange","text","target","classNames","disabled","onClick","prev","App","some","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d59676a4.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movieCard\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          data-cy=\"moviePoster\"\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\" data-cy=\"movieTitle\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\" data-cy=\"movieDescription\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl} data-cy=\"movieURL\">\n          IMDB\n        </a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import { MovieData } from '../types/MovieData';\n\nexport const movieDataToMovie = (movie: MovieData) => ({\n  title: movie.Title,\n  description: movie.Plot,\n  imgUrl: movie.Poster,\n  imdbUrl: `https://www.imdb.com/title/${movie.imdbID}`,\n  imdbId: movie.imdbID,\n});\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { getMovie } from '../../api';\nimport './FindMovie.scss';\nimport { MovieCard } from '../MovieCard';\nimport { MovieData } from '../../types/MovieData';\nimport { movieDataToMovie } from '../../utils/movieDatatoMovie';\nimport { ResponseError } from '../../types/ReponseError';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  setMovies: React.Dispatch<React.SetStateAction<Movie[]>>;\n  checkAlreadyExists: (imdbId: string) => boolean;\n};\n\nexport const FindMovie: React.FC<Props> = ({\n  setMovies,\n  checkAlreadyExists,\n}) => {\n  const [query, setQuery] = useState('');\n  const [movie, setMovie] = useState<MovieData | null>();\n  const [loading, setLoading] = useState(false);\n  const [isQueryAbsent, setIsQueryAbsent] = useState(false);\n\n  function isMovie(\n    object: MovieData | ResponseError,\n  ): object is MovieData {\n    return (object as MovieData).imdbID !== undefined;\n  }\n\n  const handleAddMovie = () => {\n    if (movie && !checkAlreadyExists(movie.imdbID)) {\n      setMovies(prev => [...prev, movieDataToMovie(movie)]);\n    }\n\n    setMovie(null);\n    setQuery('');\n  };\n\n  const handleQueryChange = (text: string) => {\n    setIsQueryAbsent(false);\n    setQuery(text);\n  };\n\n  const handleMovieRequest = (\n    e: React.MouseEvent<HTMLButtonElement, MouseEvent>,\n  ) => {\n    e.preventDefault();\n\n    setLoading(true);\n    getMovie(query.trim())\n      .then(result => {\n        if (isMovie(result)) {\n          setMovie({\n            ...result,\n            Poster: result.Poster.startsWith('https')\n              ? result.Poster\n              : 'https://via.placeholder.com/360x270.png?text=no%20preview',\n          });\n        } else {\n          setIsQueryAbsent(true);\n        }\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n  };\n\n  return (\n    <>\n      <form className=\"find-movie\">\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className=\"input is-dander\"\n              value={query}\n              onChange={e => handleQueryChange(e.target.value)}\n            />\n          </div>\n\n          {isQueryAbsent && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={classNames(\n                'button is-light',\n                { 'is-loading': loading },\n              )}\n              disabled={loading || !query}\n              onClick={(e) => handleMovieRequest(e)}\n            >\n              {movie\n                ? 'Search again'\n                : 'Find a movie'}\n            </button>\n          </div>\n\n          {movie && (\n            <div className=\"control\">\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={() => handleAddMovie()}\n              >\n                Add to the list\n              </button>\n            </div>\n          )}\n        </div>\n      </form>\n\n      {movie\n        && (\n          <div className=\"container\" data-cy=\"previewContainer\">\n            <h2 className=\"title\">Preview</h2>\n            <MovieCard movie={movieDataToMovie(movie)} />\n          </div>\n        )}\n    </>\n  );\n};\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst API_URL = 'https://www.omdbapi.com/?apikey=95eb021e';\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n\n  const checkAlreadyExists = (imdbId: string) => {\n    return movies.some(movie => movie.imdbId === imdbId);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie\n          setMovies={setMovies}\n          checkAlreadyExists={checkAlreadyExists}\n        />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}